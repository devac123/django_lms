version: '3.9'

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist PostgreSQL data

  web:
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             daphne --bind 0.0.0.0 --port 8000 core.asgi:application"
    volumes:
      - .:/app
      - static_data:/app/staticfiles  # Mount the volume for static files
      - media_data:/app/media        # Mount the volume for media files
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
      - redis
    expose:
      - "8000"  # Expose port 8000 internally for Nginx to communicate with

  nginx:
    image: nginx:latest
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Mount custom Nginx config
      - static_data:/app/staticfiles  # Ensure static files are served by Nginx
      - media_data:/app/media         # Ensure media files are served by Nginx
      - /etc/letsencrypt:/etc/letsencrypt  # SSL certificates for HTTPS
      - /var/www/certbot:/var/www/certbot  # For Certbot challenges
    depends_on:
      - web
    restart: always

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  certbot:
    image: certbot/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d developmentgang.com
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt  # Persist SSL certificates
      - /var/www/certbot:/var/www/certbot  # For Certbot challenges
    depends_on:
      - nginx

volumes:
  static_data:  # Declare static data volume
    driver: local
  media_data:  # Declare media data volume
    driver: local
  postgres_data:  # Declare PostgreSQL volume
    driver: local
